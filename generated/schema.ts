// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Moloch extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("summoner", Value.fromBytes(Bytes.empty()));
    this.set("deleted", Value.fromBoolean(false));
    this.set("summoningTime", Value.fromBigInt(BigInt.zero()));
    this.set("createdAt", Value.fromString(""));
    this.set("periodDuration", Value.fromBigInt(BigInt.zero()));
    this.set("votingPeriodLength", Value.fromBigInt(BigInt.zero()));
    this.set("gracePeriodLength", Value.fromBigInt(BigInt.zero()));
    this.set("proposalDeposit", Value.fromBigInt(BigInt.zero()));
    this.set("dilutionBound", Value.fromBigInt(BigInt.zero()));
    this.set("processingReward", Value.fromBigInt(BigInt.zero()));
    this.set("depositToken", Value.fromString(""));
    this.set("approvedTokens", Value.fromStringArray(new Array(0)));
    this.set("totalShares", Value.fromBigInt(BigInt.zero()));
    this.set("totalLoot", Value.fromBigInt(BigInt.zero()));
    this.set("v22Setup", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Moloch entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Moloch entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Moloch", id.toString(), this);
    }
  }

  static load(id: string): Moloch | null {
    return changetype<Moloch | null>(store.get("Moloch", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get version(): string | null {
    let value = this.get("version");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set version(value: string | null) {
    if (!value) {
      this.unset("version");
    } else {
      this.set("version", Value.fromString(<string>value));
    }
  }

  get summoner(): Bytes {
    let value = this.get("summoner");
    return value!.toBytes();
  }

  set summoner(value: Bytes) {
    this.set("summoner", Value.fromBytes(value));
  }

  get newContract(): string | null {
    let value = this.get("newContract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set newContract(value: string | null) {
    if (!value) {
      this.unset("newContract");
    } else {
      this.set("newContract", Value.fromString(<string>value));
    }
  }

  get deleted(): boolean {
    let value = this.get("deleted");
    return value!.toBoolean();
  }

  set deleted(value: boolean) {
    this.set("deleted", Value.fromBoolean(value));
  }

  get summoningTime(): BigInt {
    let value = this.get("summoningTime");
    return value!.toBigInt();
  }

  set summoningTime(value: BigInt) {
    this.set("summoningTime", Value.fromBigInt(value));
  }

  get createdAt(): string {
    let value = this.get("createdAt");
    return value!.toString();
  }

  set createdAt(value: string) {
    this.set("createdAt", Value.fromString(value));
  }

  get periodDuration(): BigInt {
    let value = this.get("periodDuration");
    return value!.toBigInt();
  }

  set periodDuration(value: BigInt) {
    this.set("periodDuration", Value.fromBigInt(value));
  }

  get votingPeriodLength(): BigInt {
    let value = this.get("votingPeriodLength");
    return value!.toBigInt();
  }

  set votingPeriodLength(value: BigInt) {
    this.set("votingPeriodLength", Value.fromBigInt(value));
  }

  get gracePeriodLength(): BigInt {
    let value = this.get("gracePeriodLength");
    return value!.toBigInt();
  }

  set gracePeriodLength(value: BigInt) {
    this.set("gracePeriodLength", Value.fromBigInt(value));
  }

  get proposalDeposit(): BigInt {
    let value = this.get("proposalDeposit");
    return value!.toBigInt();
  }

  set proposalDeposit(value: BigInt) {
    this.set("proposalDeposit", Value.fromBigInt(value));
  }

  get dilutionBound(): BigInt {
    let value = this.get("dilutionBound");
    return value!.toBigInt();
  }

  set dilutionBound(value: BigInt) {
    this.set("dilutionBound", Value.fromBigInt(value));
  }

  get processingReward(): BigInt {
    let value = this.get("processingReward");
    return value!.toBigInt();
  }

  set processingReward(value: BigInt) {
    this.set("processingReward", Value.fromBigInt(value));
  }

  get depositToken(): string {
    let value = this.get("depositToken");
    return value!.toString();
  }

  set depositToken(value: string) {
    this.set("depositToken", Value.fromString(value));
  }

  get approvedTokens(): Array<string> {
    let value = this.get("approvedTokens");
    return value!.toStringArray();
  }

  set approvedTokens(value: Array<string>) {
    this.set("approvedTokens", Value.fromStringArray(value));
  }

  get guildBankAddress(): Bytes | null {
    let value = this.get("guildBankAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set guildBankAddress(value: Bytes | null) {
    if (!value) {
      this.unset("guildBankAddress");
    } else {
      this.set("guildBankAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get guildBankBalanceV1(): BigInt | null {
    let value = this.get("guildBankBalanceV1");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set guildBankBalanceV1(value: BigInt | null) {
    if (!value) {
      this.unset("guildBankBalanceV1");
    } else {
      this.set("guildBankBalanceV1", Value.fromBigInt(<BigInt>value));
    }
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value!.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }

  get members(): Array<string> | null {
    let value = this.get("members");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set members(value: Array<string> | null) {
    if (!value) {
      this.unset("members");
    } else {
      this.set("members", Value.fromStringArray(<Array<string>>value));
    }
  }

  get tokenBalances(): Array<string> | null {
    let value = this.get("tokenBalances");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tokenBalances(value: Array<string> | null) {
    if (!value) {
      this.unset("tokenBalances");
    } else {
      this.set("tokenBalances", Value.fromStringArray(<Array<string>>value));
    }
  }

  get proposals(): Array<string> | null {
    let value = this.get("proposals");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set proposals(value: Array<string> | null) {
    if (!value) {
      this.unset("proposals");
    } else {
      this.set("proposals", Value.fromStringArray(<Array<string>>value));
    }
  }

  get rageQuits(): Array<string> | null {
    let value = this.get("rageQuits");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set rageQuits(value: Array<string> | null) {
    if (!value) {
      this.unset("rageQuits");
    } else {
      this.set("rageQuits", Value.fromStringArray(<Array<string>>value));
    }
  }

  get minions(): Array<string> | null {
    let value = this.get("minions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set minions(value: Array<string> | null) {
    if (!value) {
      this.unset("minions");
    } else {
      this.set("minions", Value.fromStringArray(<Array<string>>value));
    }
  }

  get shamans(): Array<string> | null {
    let value = this.get("shamans");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set shamans(value: Array<string> | null) {
    if (!value) {
      this.unset("shamans");
    } else {
      this.set("shamans", Value.fromStringArray(<Array<string>>value));
    }
  }

  get documents(): Array<string> | null {
    let value = this.get("documents");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set documents(value: Array<string> | null) {
    if (!value) {
      this.unset("documents");
    } else {
      this.set("documents", Value.fromStringArray(<Array<string>>value));
    }
  }

  get records(): Array<string> | null {
    let value = this.get("records");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set records(value: Array<string> | null) {
    if (!value) {
      this.unset("records");
    } else {
      this.set("records", Value.fromStringArray(<Array<string>>value));
    }
  }

  get totalShares(): BigInt {
    let value = this.get("totalShares");
    return value!.toBigInt();
  }

  set totalShares(value: BigInt) {
    this.set("totalShares", Value.fromBigInt(value));
  }

  get totalLoot(): BigInt {
    let value = this.get("totalLoot");
    return value!.toBigInt();
  }

  set totalLoot(value: BigInt) {
    this.set("totalLoot", Value.fromBigInt(value));
  }

  get v22Setup(): boolean {
    let value = this.get("v22Setup");
    return value!.toBoolean();
  }

  set v22Setup(value: boolean) {
    this.set("v22Setup", Value.fromBoolean(value));
  }

  get spamPreventionAddress(): Bytes | null {
    let value = this.get("spamPreventionAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set spamPreventionAddress(value: Bytes | null) {
    if (!value) {
      this.unset("spamPreventionAddress");
    } else {
      this.set("spamPreventionAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get spamPreventionAmount(): BigInt | null {
    let value = this.get("spamPreventionAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set spamPreventionAmount(value: BigInt | null) {
    if (!value) {
      this.unset("spamPreventionAmount");
    } else {
      this.set("spamPreventionAmount", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class TokenBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("moloch", Value.fromString(""));
    this.set("token", Value.fromString(""));
    this.set("tokenBalance", Value.fromBigInt(BigInt.zero()));
    this.set("guildBank", Value.fromBoolean(false));
    this.set("ecrowBank", Value.fromBoolean(false));
    this.set("memberBank", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TokenBalance entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TokenBalance", id.toString(), this);
    }
  }

  static load(id: string): TokenBalance | null {
    return changetype<TokenBalance | null>(store.get("TokenBalance", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get moloch(): string {
    let value = this.get("moloch");
    return value!.toString();
  }

  set moloch(value: string) {
    this.set("moloch", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get tokenBalance(): BigInt {
    let value = this.get("tokenBalance");
    return value!.toBigInt();
  }

  set tokenBalance(value: BigInt) {
    this.set("tokenBalance", Value.fromBigInt(value));
  }

  get member(): string | null {
    let value = this.get("member");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set member(value: string | null) {
    if (!value) {
      this.unset("member");
    } else {
      this.set("member", Value.fromString(<string>value));
    }
  }

  get guildBank(): boolean {
    let value = this.get("guildBank");
    return value!.toBoolean();
  }

  set guildBank(value: boolean) {
    this.set("guildBank", Value.fromBoolean(value));
  }

  get ecrowBank(): boolean {
    let value = this.get("ecrowBank");
    return value!.toBoolean();
  }

  set ecrowBank(value: boolean) {
    this.set("ecrowBank", Value.fromBoolean(value));
  }

  get memberBank(): boolean {
    let value = this.get("memberBank");
    return value!.toBoolean();
  }

  set memberBank(value: boolean) {
    this.set("memberBank", Value.fromBoolean(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("moloch", Value.fromString(""));
    this.set("tokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("whitelisted", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Token entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get moloch(): string {
    let value = this.get("moloch");
    return value!.toString();
  }

  set moloch(value: string) {
    this.set("moloch", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get whitelisted(): boolean {
    let value = this.get("whitelisted");
    return value!.toBoolean();
  }

  set whitelisted(value: boolean) {
    this.set("whitelisted", Value.fromBoolean(value));
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (!value) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(<string>value));
    }
  }

  get decimals(): BigInt | null {
    let value = this.get("decimals");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set decimals(value: BigInt | null) {
    if (!value) {
      this.unset("decimals");
    } else {
      this.set("decimals", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Member extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("createdAt", Value.fromString(""));
    this.set("moloch", Value.fromString(""));
    this.set("molochAddress", Value.fromBytes(Bytes.empty()));
    this.set("memberAddress", Value.fromBytes(Bytes.empty()));
    this.set("delegateKey", Value.fromBytes(Bytes.empty()));
    this.set("shares", Value.fromBigInt(BigInt.zero()));
    this.set("loot", Value.fromBigInt(BigInt.zero()));
    this.set("exists", Value.fromBoolean(false));
    this.set("tokenTribute", Value.fromBigInt(BigInt.zero()));
    this.set("didRagequit", Value.fromBoolean(false));
    this.set("proposedToKick", Value.fromBoolean(false));
    this.set("kicked", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Member entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Member entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Member", id.toString(), this);
    }
  }

  static load(id: string): Member | null {
    return changetype<Member | null>(store.get("Member", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): string {
    let value = this.get("createdAt");
    return value!.toString();
  }

  set createdAt(value: string) {
    this.set("createdAt", Value.fromString(value));
  }

  get moloch(): string {
    let value = this.get("moloch");
    return value!.toString();
  }

  set moloch(value: string) {
    this.set("moloch", Value.fromString(value));
  }

  get molochAddress(): Bytes {
    let value = this.get("molochAddress");
    return value!.toBytes();
  }

  set molochAddress(value: Bytes) {
    this.set("molochAddress", Value.fromBytes(value));
  }

  get memberAddress(): Bytes {
    let value = this.get("memberAddress");
    return value!.toBytes();
  }

  set memberAddress(value: Bytes) {
    this.set("memberAddress", Value.fromBytes(value));
  }

  get delegateKey(): Bytes {
    let value = this.get("delegateKey");
    return value!.toBytes();
  }

  set delegateKey(value: Bytes) {
    this.set("delegateKey", Value.fromBytes(value));
  }

  get shares(): BigInt {
    let value = this.get("shares");
    return value!.toBigInt();
  }

  set shares(value: BigInt) {
    this.set("shares", Value.fromBigInt(value));
  }

  get loot(): BigInt {
    let value = this.get("loot");
    return value!.toBigInt();
  }

  set loot(value: BigInt) {
    this.set("loot", Value.fromBigInt(value));
  }

  get exists(): boolean {
    let value = this.get("exists");
    return value!.toBoolean();
  }

  set exists(value: boolean) {
    this.set("exists", Value.fromBoolean(value));
  }

  get highestIndexYesVote(): string | null {
    let value = this.get("highestIndexYesVote");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set highestIndexYesVote(value: string | null) {
    if (!value) {
      this.unset("highestIndexYesVote");
    } else {
      this.set("highestIndexYesVote", Value.fromString(<string>value));
    }
  }

  get tokenTribute(): BigInt {
    let value = this.get("tokenTribute");
    return value!.toBigInt();
  }

  set tokenTribute(value: BigInt) {
    this.set("tokenTribute", Value.fromBigInt(value));
  }

  get didRagequit(): boolean {
    let value = this.get("didRagequit");
    return value!.toBoolean();
  }

  set didRagequit(value: boolean) {
    this.set("didRagequit", Value.fromBoolean(value));
  }

  get votes(): Array<string> | null {
    let value = this.get("votes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set votes(value: Array<string> | null) {
    if (!value) {
      this.unset("votes");
    } else {
      this.set("votes", Value.fromStringArray(<Array<string>>value));
    }
  }

  get submissions(): Array<string> | null {
    let value = this.get("submissions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set submissions(value: Array<string> | null) {
    if (!value) {
      this.unset("submissions");
    } else {
      this.set("submissions", Value.fromStringArray(<Array<string>>value));
    }
  }

  get tokenBalances(): Array<string> | null {
    let value = this.get("tokenBalances");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tokenBalances(value: Array<string> | null) {
    if (!value) {
      this.unset("tokenBalances");
    } else {
      this.set("tokenBalances", Value.fromStringArray(<Array<string>>value));
    }
  }

  get rageQuits(): Array<string> | null {
    let value = this.get("rageQuits");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set rageQuits(value: Array<string> | null) {
    if (!value) {
      this.unset("rageQuits");
    } else {
      this.set("rageQuits", Value.fromStringArray(<Array<string>>value));
    }
  }

  get proposedToKick(): boolean {
    let value = this.get("proposedToKick");
    return value!.toBoolean();
  }

  set proposedToKick(value: boolean) {
    this.set("proposedToKick", Value.fromBoolean(value));
  }

  get kicked(): boolean {
    let value = this.get("kicked");
    return value!.toBoolean();
  }

  set kicked(value: boolean) {
    this.set("kicked", Value.fromBoolean(value));
  }

  get jailed(): BigInt | null {
    let value = this.get("jailed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set jailed(value: BigInt | null) {
    if (!value) {
      this.unset("jailed");
    } else {
      this.set("jailed", Value.fromBigInt(<BigInt>value));
    }
  }

  get isDao(): string | null {
    let value = this.get("isDao");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set isDao(value: string | null) {
    if (!value) {
      this.unset("isDao");
    } else {
      this.set("isDao", Value.fromString(<string>value));
    }
  }

  get isSafeMinion(): string | null {
    let value = this.get("isSafeMinion");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set isSafeMinion(value: string | null) {
    if (!value) {
      this.unset("isSafeMinion");
    } else {
      this.set("isSafeMinion", Value.fromString(<string>value));
    }
  }
}

export class Vote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("createdAt", Value.fromString(""));
    this.set("proposal", Value.fromString(""));
    this.set("member", Value.fromString(""));
    this.set("uintVote", Value.fromI32(0));
    this.set("molochAddress", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vote entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Vote entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Vote", id.toString(), this);
    }
  }

  static load(id: string): Vote | null {
    return changetype<Vote | null>(store.get("Vote", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): string {
    let value = this.get("createdAt");
    return value!.toString();
  }

  set createdAt(value: string) {
    this.set("createdAt", Value.fromString(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    return value!.toString();
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }

  get member(): string {
    let value = this.get("member");
    return value!.toString();
  }

  set member(value: string) {
    this.set("member", Value.fromString(value));
  }

  get uintVote(): i32 {
    let value = this.get("uintVote");
    return value!.toI32();
  }

  set uintVote(value: i32) {
    this.set("uintVote", Value.fromI32(value));
  }

  get molochAddress(): Bytes {
    let value = this.get("molochAddress");
    return value!.toBytes();
  }

  set molochAddress(value: Bytes) {
    this.set("molochAddress", Value.fromBytes(value));
  }

  get memberAddress(): Bytes | null {
    let value = this.get("memberAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set memberAddress(value: Bytes | null) {
    if (!value) {
      this.unset("memberAddress");
    } else {
      this.set("memberAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get memberPower(): BigInt | null {
    let value = this.get("memberPower");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set memberPower(value: BigInt | null) {
    if (!value) {
      this.unset("memberPower");
    } else {
      this.set("memberPower", Value.fromBigInt(<BigInt>value));
    }
  }

  get proposalIndex(): BigInt | null {
    let value = this.get("proposalIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set proposalIndex(value: BigInt | null) {
    if (!value) {
      this.unset("proposalIndex");
    } else {
      this.set("proposalIndex", Value.fromBigInt(<BigInt>value));
    }
  }

  get delegateKey(): Bytes | null {
    let value = this.get("delegateKey");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set delegateKey(value: Bytes | null) {
    if (!value) {
      this.unset("delegateKey");
    } else {
      this.set("delegateKey", Value.fromBytes(<Bytes>value));
    }
  }
}

export class Proposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("createdAt", Value.fromString(""));
    this.set("createdBy", Value.fromBytes(Bytes.empty()));
    this.set("proposalId", Value.fromBigInt(BigInt.zero()));
    this.set("moloch", Value.fromString(""));
    this.set("molochAddress", Value.fromBytes(Bytes.empty()));
    this.set("member", Value.fromString(""));
    this.set("memberAddress", Value.fromBytes(Bytes.empty()));
    this.set("delegateKey", Value.fromBytes(Bytes.empty()));
    this.set("applicant", Value.fromBytes(Bytes.empty()));
    this.set("sponsor", Value.fromBytes(Bytes.empty()));
    this.set("sharesRequested", Value.fromBigInt(BigInt.zero()));
    this.set("lootRequested", Value.fromBigInt(BigInt.zero()));
    this.set("tributeOffered", Value.fromBigInt(BigInt.zero()));
    this.set("tributeToken", Value.fromBytes(Bytes.empty()));
    this.set("paymentRequested", Value.fromBigInt(BigInt.zero()));
    this.set("paymentToken", Value.fromBytes(Bytes.empty()));
    this.set("yesVotes", Value.fromBigInt(BigInt.zero()));
    this.set("noVotes", Value.fromBigInt(BigInt.zero()));
    this.set("sponsored", Value.fromBoolean(false));
    this.set("processed", Value.fromBoolean(false));
    this.set("didPass", Value.fromBoolean(false));
    this.set("cancelled", Value.fromBoolean(false));
    this.set("aborted", Value.fromBoolean(false));
    this.set("whitelist", Value.fromBoolean(false));
    this.set("guildkick", Value.fromBoolean(false));
    this.set("newMember", Value.fromBoolean(false));
    this.set("trade", Value.fromBoolean(false));
    this.set("guildkickOrWhitelistOrMinion", Value.fromBoolean(false));
    this.set("yesShares", Value.fromBigInt(BigInt.zero()));
    this.set("noShares", Value.fromBigInt(BigInt.zero()));
    this.set("votingPeriodStarts", Value.fromBigInt(BigInt.zero()));
    this.set("votingPeriodEnds", Value.fromBigInt(BigInt.zero()));
    this.set("gracePeriodEnds", Value.fromBigInt(BigInt.zero()));
    this.set("molochVersion", Value.fromString(""));
    this.set("isMinion", Value.fromBoolean(false));
    this.set("uberHausMinionExecuted", Value.fromBoolean(false));
    this.set("executed", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Proposal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Proposal entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Proposal", id.toString(), this);
    }
  }

  static load(id: string): Proposal | null {
    return changetype<Proposal | null>(store.get("Proposal", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): string {
    let value = this.get("createdAt");
    return value!.toString();
  }

  set createdAt(value: string) {
    this.set("createdAt", Value.fromString(value));
  }

  get createdBy(): Bytes {
    let value = this.get("createdBy");
    return value!.toBytes();
  }

  set createdBy(value: Bytes) {
    this.set("createdBy", Value.fromBytes(value));
  }

  get proposalIndex(): BigInt | null {
    let value = this.get("proposalIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set proposalIndex(value: BigInt | null) {
    if (!value) {
      this.unset("proposalIndex");
    } else {
      this.set("proposalIndex", Value.fromBigInt(<BigInt>value));
    }
  }

  get proposalId(): BigInt {
    let value = this.get("proposalId");
    return value!.toBigInt();
  }

  set proposalId(value: BigInt) {
    this.set("proposalId", Value.fromBigInt(value));
  }

  get moloch(): string {
    let value = this.get("moloch");
    return value!.toString();
  }

  set moloch(value: string) {
    this.set("moloch", Value.fromString(value));
  }

  get molochAddress(): Bytes {
    let value = this.get("molochAddress");
    return value!.toBytes();
  }

  set molochAddress(value: Bytes) {
    this.set("molochAddress", Value.fromBytes(value));
  }

  get member(): string {
    let value = this.get("member");
    return value!.toString();
  }

  set member(value: string) {
    this.set("member", Value.fromString(value));
  }

  get memberAddress(): Bytes {
    let value = this.get("memberAddress");
    return value!.toBytes();
  }

  set memberAddress(value: Bytes) {
    this.set("memberAddress", Value.fromBytes(value));
  }

  get delegateKey(): Bytes {
    let value = this.get("delegateKey");
    return value!.toBytes();
  }

  set delegateKey(value: Bytes) {
    this.set("delegateKey", Value.fromBytes(value));
  }

  get applicant(): Bytes {
    let value = this.get("applicant");
    return value!.toBytes();
  }

  set applicant(value: Bytes) {
    this.set("applicant", Value.fromBytes(value));
  }

  get proposer(): Bytes | null {
    let value = this.get("proposer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set proposer(value: Bytes | null) {
    if (!value) {
      this.unset("proposer");
    } else {
      this.set("proposer", Value.fromBytes(<Bytes>value));
    }
  }

  get sponsor(): Bytes {
    let value = this.get("sponsor");
    return value!.toBytes();
  }

  set sponsor(value: Bytes) {
    this.set("sponsor", Value.fromBytes(value));
  }

  get processor(): Bytes | null {
    let value = this.get("processor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set processor(value: Bytes | null) {
    if (!value) {
      this.unset("processor");
    } else {
      this.set("processor", Value.fromBytes(<Bytes>value));
    }
  }

  get sharesRequested(): BigInt {
    let value = this.get("sharesRequested");
    return value!.toBigInt();
  }

  set sharesRequested(value: BigInt) {
    this.set("sharesRequested", Value.fromBigInt(value));
  }

  get lootRequested(): BigInt {
    let value = this.get("lootRequested");
    return value!.toBigInt();
  }

  set lootRequested(value: BigInt) {
    this.set("lootRequested", Value.fromBigInt(value));
  }

  get tributeOffered(): BigInt {
    let value = this.get("tributeOffered");
    return value!.toBigInt();
  }

  set tributeOffered(value: BigInt) {
    this.set("tributeOffered", Value.fromBigInt(value));
  }

  get tributeToken(): Bytes {
    let value = this.get("tributeToken");
    return value!.toBytes();
  }

  set tributeToken(value: Bytes) {
    this.set("tributeToken", Value.fromBytes(value));
  }

  get tributeTokenSymbol(): string | null {
    let value = this.get("tributeTokenSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tributeTokenSymbol(value: string | null) {
    if (!value) {
      this.unset("tributeTokenSymbol");
    } else {
      this.set("tributeTokenSymbol", Value.fromString(<string>value));
    }
  }

  get tributeTokenDecimals(): BigInt | null {
    let value = this.get("tributeTokenDecimals");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tributeTokenDecimals(value: BigInt | null) {
    if (!value) {
      this.unset("tributeTokenDecimals");
    } else {
      this.set("tributeTokenDecimals", Value.fromBigInt(<BigInt>value));
    }
  }

  get paymentRequested(): BigInt {
    let value = this.get("paymentRequested");
    return value!.toBigInt();
  }

  set paymentRequested(value: BigInt) {
    this.set("paymentRequested", Value.fromBigInt(value));
  }

  get paymentToken(): Bytes {
    let value = this.get("paymentToken");
    return value!.toBytes();
  }

  set paymentToken(value: Bytes) {
    this.set("paymentToken", Value.fromBytes(value));
  }

  get paymentTokenSymbol(): string | null {
    let value = this.get("paymentTokenSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set paymentTokenSymbol(value: string | null) {
    if (!value) {
      this.unset("paymentTokenSymbol");
    } else {
      this.set("paymentTokenSymbol", Value.fromString(<string>value));
    }
  }

  get paymentTokenDecimals(): BigInt | null {
    let value = this.get("paymentTokenDecimals");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set paymentTokenDecimals(value: BigInt | null) {
    if (!value) {
      this.unset("paymentTokenDecimals");
    } else {
      this.set("paymentTokenDecimals", Value.fromBigInt(<BigInt>value));
    }
  }

  get startingPeriod(): BigInt | null {
    let value = this.get("startingPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set startingPeriod(value: BigInt | null) {
    if (!value) {
      this.unset("startingPeriod");
    } else {
      this.set("startingPeriod", Value.fromBigInt(<BigInt>value));
    }
  }

  get yesVotes(): BigInt {
    let value = this.get("yesVotes");
    return value!.toBigInt();
  }

  set yesVotes(value: BigInt) {
    this.set("yesVotes", Value.fromBigInt(value));
  }

  get noVotes(): BigInt {
    let value = this.get("noVotes");
    return value!.toBigInt();
  }

  set noVotes(value: BigInt) {
    this.set("noVotes", Value.fromBigInt(value));
  }

  get sponsored(): boolean {
    let value = this.get("sponsored");
    return value!.toBoolean();
  }

  set sponsored(value: boolean) {
    this.set("sponsored", Value.fromBoolean(value));
  }

  get sponsoredAt(): string | null {
    let value = this.get("sponsoredAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sponsoredAt(value: string | null) {
    if (!value) {
      this.unset("sponsoredAt");
    } else {
      this.set("sponsoredAt", Value.fromString(<string>value));
    }
  }

  get processed(): boolean {
    let value = this.get("processed");
    return value!.toBoolean();
  }

  set processed(value: boolean) {
    this.set("processed", Value.fromBoolean(value));
  }

  get processedAt(): string | null {
    let value = this.get("processedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set processedAt(value: string | null) {
    if (!value) {
      this.unset("processedAt");
    } else {
      this.set("processedAt", Value.fromString(<string>value));
    }
  }

  get didPass(): boolean {
    let value = this.get("didPass");
    return value!.toBoolean();
  }

  set didPass(value: boolean) {
    this.set("didPass", Value.fromBoolean(value));
  }

  get cancelled(): boolean {
    let value = this.get("cancelled");
    return value!.toBoolean();
  }

  set cancelled(value: boolean) {
    this.set("cancelled", Value.fromBoolean(value));
  }

  get cancelledAt(): string | null {
    let value = this.get("cancelledAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set cancelledAt(value: string | null) {
    if (!value) {
      this.unset("cancelledAt");
    } else {
      this.set("cancelledAt", Value.fromString(<string>value));
    }
  }

  get aborted(): boolean {
    let value = this.get("aborted");
    return value!.toBoolean();
  }

  set aborted(value: boolean) {
    this.set("aborted", Value.fromBoolean(value));
  }

  get whitelist(): boolean {
    let value = this.get("whitelist");
    return value!.toBoolean();
  }

  set whitelist(value: boolean) {
    this.set("whitelist", Value.fromBoolean(value));
  }

  get guildkick(): boolean {
    let value = this.get("guildkick");
    return value!.toBoolean();
  }

  set guildkick(value: boolean) {
    this.set("guildkick", Value.fromBoolean(value));
  }

  get newMember(): boolean {
    let value = this.get("newMember");
    return value!.toBoolean();
  }

  set newMember(value: boolean) {
    this.set("newMember", Value.fromBoolean(value));
  }

  get trade(): boolean {
    let value = this.get("trade");
    return value!.toBoolean();
  }

  set trade(value: boolean) {
    this.set("trade", Value.fromBoolean(value));
  }

  get guildkickOrWhitelistOrMinion(): boolean {
    let value = this.get("guildkickOrWhitelistOrMinion");
    return value!.toBoolean();
  }

  set guildkickOrWhitelistOrMinion(value: boolean) {
    this.set("guildkickOrWhitelistOrMinion", Value.fromBoolean(value));
  }

  get details(): string | null {
    let value = this.get("details");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set details(value: string | null) {
    if (!value) {
      this.unset("details");
    } else {
      this.set("details", Value.fromString(<string>value));
    }
  }

  get maxTotalSharesAndLootAtYesVote(): BigInt | null {
    let value = this.get("maxTotalSharesAndLootAtYesVote");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxTotalSharesAndLootAtYesVote(value: BigInt | null) {
    if (!value) {
      this.unset("maxTotalSharesAndLootAtYesVote");
    } else {
      this.set(
        "maxTotalSharesAndLootAtYesVote",
        Value.fromBigInt(<BigInt>value)
      );
    }
  }

  get votes(): Array<string> | null {
    let value = this.get("votes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set votes(value: Array<string> | null) {
    if (!value) {
      this.unset("votes");
    } else {
      this.set("votes", Value.fromStringArray(<Array<string>>value));
    }
  }

  get yesShares(): BigInt {
    let value = this.get("yesShares");
    return value!.toBigInt();
  }

  set yesShares(value: BigInt) {
    this.set("yesShares", Value.fromBigInt(value));
  }

  get noShares(): BigInt {
    let value = this.get("noShares");
    return value!.toBigInt();
  }

  set noShares(value: BigInt) {
    this.set("noShares", Value.fromBigInt(value));
  }

  get votingPeriodStarts(): BigInt {
    let value = this.get("votingPeriodStarts");
    return value!.toBigInt();
  }

  set votingPeriodStarts(value: BigInt) {
    this.set("votingPeriodStarts", Value.fromBigInt(value));
  }

  get votingPeriodEnds(): BigInt {
    let value = this.get("votingPeriodEnds");
    return value!.toBigInt();
  }

  set votingPeriodEnds(value: BigInt) {
    this.set("votingPeriodEnds", Value.fromBigInt(value));
  }

  get gracePeriodEnds(): BigInt {
    let value = this.get("gracePeriodEnds");
    return value!.toBigInt();
  }

  set gracePeriodEnds(value: BigInt) {
    this.set("gracePeriodEnds", Value.fromBigInt(value));
  }

  get molochVersion(): string {
    let value = this.get("molochVersion");
    return value!.toString();
  }

  set molochVersion(value: string) {
    this.set("molochVersion", Value.fromString(value));
  }

  get isMinion(): boolean {
    let value = this.get("isMinion");
    return value!.toBoolean();
  }

  set isMinion(value: boolean) {
    this.set("isMinion", Value.fromBoolean(value));
  }

  get uberHausMinionExecuted(): boolean {
    let value = this.get("uberHausMinionExecuted");
    return value!.toBoolean();
  }

  set uberHausMinionExecuted(value: boolean) {
    this.set("uberHausMinionExecuted", Value.fromBoolean(value));
  }

  get executed(): boolean {
    let value = this.get("executed");
    return value!.toBoolean();
  }

  set executed(value: boolean) {
    this.set("executed", Value.fromBoolean(value));
  }

  get minionAddress(): Bytes | null {
    let value = this.get("minionAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set minionAddress(value: Bytes | null) {
    if (!value) {
      this.unset("minionAddress");
    } else {
      this.set("minionAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get minionExecuteActionTx(): string | null {
    let value = this.get("minionExecuteActionTx");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set minionExecuteActionTx(value: string | null) {
    if (!value) {
      this.unset("minionExecuteActionTx");
    } else {
      this.set("minionExecuteActionTx", Value.fromString(<string>value));
    }
  }

  get minion(): string | null {
    let value = this.get("minion");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set minion(value: string | null) {
    if (!value) {
      this.unset("minion");
    } else {
      this.set("minion", Value.fromString(<string>value));
    }
  }

  get escrow(): string | null {
    let value = this.get("escrow");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set escrow(value: string | null) {
    if (!value) {
      this.unset("escrow");
    } else {
      this.set("escrow", Value.fromString(<string>value));
    }
  }

  get actions(): Array<string> | null {
    let value = this.get("actions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set actions(value: Array<string> | null) {
    if (!value) {
      this.unset("actions");
    } else {
      this.set("actions", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class RageQuit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("createdAt", Value.fromString(""));
    this.set("moloch", Value.fromString(""));
    this.set("molochAddress", Value.fromBytes(Bytes.empty()));
    this.set("member", Value.fromString(""));
    this.set("memberAddress", Value.fromBytes(Bytes.empty()));
    this.set("shares", Value.fromBigInt(BigInt.zero()));
    this.set("loot", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RageQuit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RageQuit entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("RageQuit", id.toString(), this);
    }
  }

  static load(id: string): RageQuit | null {
    return changetype<RageQuit | null>(store.get("RageQuit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): string {
    let value = this.get("createdAt");
    return value!.toString();
  }

  set createdAt(value: string) {
    this.set("createdAt", Value.fromString(value));
  }

  get moloch(): string {
    let value = this.get("moloch");
    return value!.toString();
  }

  set moloch(value: string) {
    this.set("moloch", Value.fromString(value));
  }

  get molochAddress(): Bytes {
    let value = this.get("molochAddress");
    return value!.toBytes();
  }

  set molochAddress(value: Bytes) {
    this.set("molochAddress", Value.fromBytes(value));
  }

  get member(): string {
    let value = this.get("member");
    return value!.toString();
  }

  set member(value: string) {
    this.set("member", Value.fromString(value));
  }

  get memberAddress(): Bytes {
    let value = this.get("memberAddress");
    return value!.toBytes();
  }

  set memberAddress(value: Bytes) {
    this.set("memberAddress", Value.fromBytes(value));
  }

  get shares(): BigInt {
    let value = this.get("shares");
    return value!.toBigInt();
  }

  set shares(value: BigInt) {
    this.set("shares", Value.fromBigInt(value));
  }

  get loot(): BigInt {
    let value = this.get("loot");
    return value!.toBigInt();
  }

  set loot(value: BigInt) {
    this.set("loot", Value.fromBigInt(value));
  }
}

export class DaoMeta extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DaoMeta entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DaoMeta entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DaoMeta", id.toString(), this);
    }
  }

  static load(id: string): DaoMeta | null {
    return changetype<DaoMeta | null>(store.get("DaoMeta", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get title(): string | null {
    let value = this.get("title");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set title(value: string | null) {
    if (!value) {
      this.unset("title");
    } else {
      this.set("title", Value.fromString(<string>value));
    }
  }

  get version(): string | null {
    let value = this.get("version");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set version(value: string | null) {
    if (!value) {
      this.unset("version");
    } else {
      this.set("version", Value.fromString(<string>value));
    }
  }

  get newContract(): string | null {
    let value = this.get("newContract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set newContract(value: string | null) {
    if (!value) {
      this.unset("newContract");
    } else {
      this.set("newContract", Value.fromString(<string>value));
    }
  }

  get http(): string | null {
    let value = this.get("http");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set http(value: string | null) {
    if (!value) {
      this.unset("http");
    } else {
      this.set("http", Value.fromString(<string>value));
    }
  }
}

export class Minion extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("createdAt", Value.fromString(""));
    this.set("minionAddress", Value.fromBytes(Bytes.empty()));
    this.set("molochAddress", Value.fromBytes(Bytes.empty()));
    this.set("moloch", Value.fromString(""));
    this.set("details", Value.fromString(""));
    this.set("minionType", Value.fromString(""));
    this.set("crossChainMinion", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Minion entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Minion entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Minion", id.toString(), this);
    }
  }

  static load(id: string): Minion | null {
    return changetype<Minion | null>(store.get("Minion", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): string {
    let value = this.get("createdAt");
    return value!.toString();
  }

  set createdAt(value: string) {
    this.set("createdAt", Value.fromString(value));
  }

  get minionAddress(): Bytes {
    let value = this.get("minionAddress");
    return value!.toBytes();
  }

  set minionAddress(value: Bytes) {
    this.set("minionAddress", Value.fromBytes(value));
  }

  get molochAddress(): Bytes {
    let value = this.get("molochAddress");
    return value!.toBytes();
  }

  set molochAddress(value: Bytes) {
    this.set("molochAddress", Value.fromBytes(value));
  }

  get moloch(): string {
    let value = this.get("moloch");
    return value!.toString();
  }

  set moloch(value: string) {
    this.set("moloch", Value.fromString(value));
  }

  get details(): string {
    let value = this.get("details");
    return value!.toString();
  }

  set details(value: string) {
    this.set("details", Value.fromString(value));
  }

  get minionType(): string {
    let value = this.get("minionType");
    return value!.toString();
  }

  set minionType(value: string) {
    this.set("minionType", Value.fromString(value));
  }

  get proposals(): Array<string> | null {
    let value = this.get("proposals");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set proposals(value: Array<string> | null) {
    if (!value) {
      this.unset("proposals");
    } else {
      this.set("proposals", Value.fromStringArray(<Array<string>>value));
    }
  }

  get uberHausAddress(): Bytes | null {
    let value = this.get("uberHausAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set uberHausAddress(value: Bytes | null) {
    if (!value) {
      this.unset("uberHausAddress");
    } else {
      this.set("uberHausAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get uberHaus(): string | null {
    let value = this.get("uberHaus");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set uberHaus(value: string | null) {
    if (!value) {
      this.unset("uberHaus");
    } else {
      this.set("uberHaus", Value.fromString(<string>value));
    }
  }

  get uberHausDelegateRewardFactor(): BigInt | null {
    let value = this.get("uberHausDelegateRewardFactor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set uberHausDelegateRewardFactor(value: BigInt | null) {
    if (!value) {
      this.unset("uberHausDelegateRewardFactor");
    } else {
      this.set("uberHausDelegateRewardFactor", Value.fromBigInt(<BigInt>value));
    }
  }

  get uberHausDelegate(): Bytes | null {
    let value = this.get("uberHausDelegate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set uberHausDelegate(value: Bytes | null) {
    if (!value) {
      this.unset("uberHausDelegate");
    } else {
      this.set("uberHausDelegate", Value.fromBytes(<Bytes>value));
    }
  }

  get safeAddress(): Bytes | null {
    let value = this.get("safeAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set safeAddress(value: Bytes | null) {
    if (!value) {
      this.unset("safeAddress");
    } else {
      this.set("safeAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get safeMinionVersion(): string | null {
    let value = this.get("safeMinionVersion");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set safeMinionVersion(value: string | null) {
    if (!value) {
      this.unset("safeMinionVersion");
    } else {
      this.set("safeMinionVersion", Value.fromString(<string>value));
    }
  }

  get crossChainMinion(): boolean {
    let value = this.get("crossChainMinion");
    return value!.toBoolean();
  }

  set crossChainMinion(value: boolean) {
    this.set("crossChainMinion", Value.fromBoolean(value));
  }

  get foreignChainId(): string | null {
    let value = this.get("foreignChainId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set foreignChainId(value: string | null) {
    if (!value) {
      this.unset("foreignChainId");
    } else {
      this.set("foreignChainId", Value.fromString(<string>value));
    }
  }

  get foreignSafeAddress(): Bytes | null {
    let value = this.get("foreignSafeAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set foreignSafeAddress(value: Bytes | null) {
    if (!value) {
      this.unset("foreignSafeAddress");
    } else {
      this.set("foreignSafeAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get bridgeModule(): string | null {
    let value = this.get("bridgeModule");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set bridgeModule(value: string | null) {
    if (!value) {
      this.unset("bridgeModule");
    } else {
      this.set("bridgeModule", Value.fromString(<string>value));
    }
  }

  get version(): string | null {
    let value = this.get("version");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set version(value: string | null) {
    if (!value) {
      this.unset("version");
    } else {
      this.set("version", Value.fromString(<string>value));
    }
  }

  get minQuorum(): BigInt | null {
    let value = this.get("minQuorum");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minQuorum(value: BigInt | null) {
    if (!value) {
      this.unset("minQuorum");
    } else {
      this.set("minQuorum", Value.fromBigInt(<BigInt>value));
    }
  }

  get streams(): Array<string> | null {
    let value = this.get("streams");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set streams(value: Array<string> | null) {
    if (!value) {
      this.unset("streams");
    } else {
      this.set("streams", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class MinionStream extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("proposalId", Value.fromString(""));
    this.set("createdAt", Value.fromString(""));
    this.set("to", Value.fromBytes(Bytes.empty()));
    this.set("tokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("superTokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("rate", Value.fromBigInt(BigInt.zero()));
    this.set("minDeposit", Value.fromBigInt(BigInt.zero()));
    this.set("proposer", Value.fromBytes(Bytes.empty()));
    this.set("executed", Value.fromBoolean(false));
    this.set("active", Value.fromBoolean(false));
    this.set("ctx", Value.fromBytes(Bytes.empty()));
    this.set("minion", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MinionStream entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save MinionStream entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("MinionStream", id.toString(), this);
    }
  }

  static load(id: string): MinionStream | null {
    return changetype<MinionStream | null>(store.get("MinionStream", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposalId(): string {
    let value = this.get("proposalId");
    return value!.toString();
  }

  set proposalId(value: string) {
    this.set("proposalId", Value.fromString(value));
  }

  get createdAt(): string {
    let value = this.get("createdAt");
    return value!.toString();
  }

  set createdAt(value: string) {
    this.set("createdAt", Value.fromString(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get superTokenAddress(): Bytes {
    let value = this.get("superTokenAddress");
    return value!.toBytes();
  }

  set superTokenAddress(value: Bytes) {
    this.set("superTokenAddress", Value.fromBytes(value));
  }

  get rate(): BigInt {
    let value = this.get("rate");
    return value!.toBigInt();
  }

  set rate(value: BigInt) {
    this.set("rate", Value.fromBigInt(value));
  }

  get minDeposit(): BigInt {
    let value = this.get("minDeposit");
    return value!.toBigInt();
  }

  set minDeposit(value: BigInt) {
    this.set("minDeposit", Value.fromBigInt(value));
  }

  get proposer(): Bytes {
    let value = this.get("proposer");
    return value!.toBytes();
  }

  set proposer(value: Bytes) {
    this.set("proposer", Value.fromBytes(value));
  }

  get executed(): boolean {
    let value = this.get("executed");
    return value!.toBoolean();
  }

  set executed(value: boolean) {
    this.set("executed", Value.fromBoolean(value));
  }

  get executedBlock(): BigInt | null {
    let value = this.get("executedBlock");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set executedBlock(value: BigInt | null) {
    if (!value) {
      this.unset("executedBlock");
    } else {
      this.set("executedBlock", Value.fromBigInt(<BigInt>value));
    }
  }

  get executedAt(): string | null {
    let value = this.get("executedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set executedAt(value: string | null) {
    if (!value) {
      this.unset("executedAt");
    } else {
      this.set("executedAt", Value.fromString(<string>value));
    }
  }

  get execTxHash(): Bytes | null {
    let value = this.get("execTxHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set execTxHash(value: Bytes | null) {
    if (!value) {
      this.unset("execTxHash");
    } else {
      this.set("execTxHash", Value.fromBytes(<Bytes>value));
    }
  }

  get active(): boolean {
    let value = this.get("active");
    return value!.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }

  get ctx(): Bytes {
    let value = this.get("ctx");
    return value!.toBytes();
  }

  set ctx(value: Bytes) {
    this.set("ctx", Value.fromBytes(value));
  }

  get canceledAt(): string | null {
    let value = this.get("canceledAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set canceledAt(value: string | null) {
    if (!value) {
      this.unset("canceledAt");
    } else {
      this.set("canceledAt", Value.fromString(<string>value));
    }
  }

  get canceledBy(): Bytes | null {
    let value = this.get("canceledBy");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set canceledBy(value: Bytes | null) {
    if (!value) {
      this.unset("canceledBy");
    } else {
      this.set("canceledBy", Value.fromBytes(<Bytes>value));
    }
  }

  get minion(): string {
    let value = this.get("minion");
    return value!.toString();
  }

  set minion(value: string) {
    this.set("minion", Value.fromString(value));
  }
}

export class SafeMinion extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("minions", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SafeMinion entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SafeMinion entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SafeMinion", id.toString(), this);
    }
  }

  static load(id: string): SafeMinion | null {
    return changetype<SafeMinion | null>(store.get("SafeMinion", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get minions(): Array<string> {
    let value = this.get("minions");
    return value!.toStringArray();
  }

  set minions(value: Array<string>) {
    this.set("minions", Value.fromStringArray(value));
  }
}

export class MolochTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("createdAt", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MolochTransaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save MolochTransaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("MolochTransaction", id.toString(), this);
    }
  }

  static load(id: string): MolochTransaction | null {
    return changetype<MolochTransaction | null>(
      store.get("MolochTransaction", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): string {
    let value = this.get("createdAt");
    return value!.toString();
  }

  set createdAt(value: string) {
    this.set("createdAt", Value.fromString(value));
  }
}

export class ProposalEscrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("proposal", Value.fromString(""));
    this.set("minionAddress", Value.fromBytes(Bytes.empty()));
    this.set("molochAddress", Value.fromBytes(Bytes.empty()));
    this.set("proposer", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProposalEscrow entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ProposalEscrow entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ProposalEscrow", id.toString(), this);
    }
  }

  static load(id: string): ProposalEscrow | null {
    return changetype<ProposalEscrow | null>(store.get("ProposalEscrow", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    return value!.toString();
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }

  get minionAddress(): Bytes {
    let value = this.get("minionAddress");
    return value!.toBytes();
  }

  set minionAddress(value: Bytes) {
    this.set("minionAddress", Value.fromBytes(value));
  }

  get molochAddress(): Bytes {
    let value = this.get("molochAddress");
    return value!.toBytes();
  }

  set molochAddress(value: Bytes) {
    this.set("molochAddress", Value.fromBytes(value));
  }

  get proposer(): Bytes {
    let value = this.get("proposer");
    return value!.toBytes();
  }

  set proposer(value: Bytes) {
    this.set("proposer", Value.fromBytes(value));
  }

  get tokenAddresses(): Array<Bytes> | null {
    let value = this.get("tokenAddresses");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set tokenAddresses(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("tokenAddresses");
    } else {
      this.set("tokenAddresses", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get tokenTypes(): Array<BigInt> | null {
    let value = this.get("tokenTypes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set tokenTypes(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("tokenTypes");
    } else {
      this.set("tokenTypes", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get tokenIds(): Array<BigInt> | null {
    let value = this.get("tokenIds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set tokenIds(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("tokenIds");
    } else {
      this.set("tokenIds", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get amounts(): Array<BigInt> | null {
    let value = this.get("amounts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set amounts(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("amounts");
    } else {
      this.set("amounts", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }
}

export class MinionAction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("proposal", Value.fromString(""));
    this.set("minionAddress", Value.fromBytes(Bytes.empty()));
    this.set("molochAddress", Value.fromBytes(Bytes.empty()));
    this.set("target", Value.fromBytes(Bytes.empty()));
    this.set("withdrawToken", Value.fromBytes(Bytes.empty()));
    this.set("withdrawValue", Value.fromBigInt(BigInt.zero()));
    this.set("data", Value.fromString(""));
    this.set("memberOnly", Value.fromBoolean(false));
    this.set("index", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MinionAction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save MinionAction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("MinionAction", id.toString(), this);
    }
  }

  static load(id: string): MinionAction | null {
    return changetype<MinionAction | null>(store.get("MinionAction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    return value!.toString();
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }

  get minionAddress(): Bytes {
    let value = this.get("minionAddress");
    return value!.toBytes();
  }

  set minionAddress(value: Bytes) {
    this.set("minionAddress", Value.fromBytes(value));
  }

  get molochAddress(): Bytes {
    let value = this.get("molochAddress");
    return value!.toBytes();
  }

  set molochAddress(value: Bytes) {
    this.set("molochAddress", Value.fromBytes(value));
  }

  get target(): Bytes {
    let value = this.get("target");
    return value!.toBytes();
  }

  set target(value: Bytes) {
    this.set("target", Value.fromBytes(value));
  }

  get withdrawToken(): Bytes {
    let value = this.get("withdrawToken");
    return value!.toBytes();
  }

  set withdrawToken(value: Bytes) {
    this.set("withdrawToken", Value.fromBytes(value));
  }

  get withdrawValue(): BigInt {
    let value = this.get("withdrawValue");
    return value!.toBigInt();
  }

  set withdrawValue(value: BigInt) {
    this.set("withdrawValue", Value.fromBigInt(value));
  }

  get data(): string {
    let value = this.get("data");
    return value!.toString();
  }

  set data(value: string) {
    this.set("data", Value.fromString(value));
  }

  get memberOnly(): boolean {
    let value = this.get("memberOnly");
    return value!.toBoolean();
  }

  set memberOnly(value: boolean) {
    this.set("memberOnly", Value.fromBoolean(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    return value!.toBigInt();
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }
}

export class Shaman extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("createdAt", Value.fromString(""));
    this.set("shamanAddress", Value.fromBytes(Bytes.empty()));
    this.set("molochAddress", Value.fromBytes(Bytes.empty()));
    this.set("moloch", Value.fromString(""));
    this.set("enabled", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Shaman entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Shaman entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Shaman", id.toString(), this);
    }
  }

  static load(id: string): Shaman | null {
    return changetype<Shaman | null>(store.get("Shaman", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): string {
    let value = this.get("createdAt");
    return value!.toString();
  }

  set createdAt(value: string) {
    this.set("createdAt", Value.fromString(value));
  }

  get shamanAddress(): Bytes {
    let value = this.get("shamanAddress");
    return value!.toBytes();
  }

  set shamanAddress(value: Bytes) {
    this.set("shamanAddress", Value.fromBytes(value));
  }

  get molochAddress(): Bytes {
    let value = this.get("molochAddress");
    return value!.toBytes();
  }

  set molochAddress(value: Bytes) {
    this.set("molochAddress", Value.fromBytes(value));
  }

  get moloch(): string {
    let value = this.get("moloch");
    return value!.toString();
  }

  set moloch(value: string) {
    this.set("moloch", Value.fromString(value));
  }

  get enabled(): boolean {
    let value = this.get("enabled");
    return value!.toBoolean();
  }

  set enabled(value: boolean) {
    this.set("enabled", Value.fromBoolean(value));
  }
}

export class Content extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("createdAt", Value.fromString(""));
    this.set("transactionHash", Value.fromBytes(Bytes.empty()));
    this.set("memberAddress", Value.fromBytes(Bytes.empty()));
    this.set("content", Value.fromString(""));
    this.set("contentType", Value.fromString(""));
    this.set("location", Value.fromString(""));
    this.set("ratified", Value.fromBoolean(false));
    this.set("rawData", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Content entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Content entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Content", id.toString(), this);
    }
  }

  static load(id: string): Content | null {
    return changetype<Content | null>(store.get("Content", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): string {
    let value = this.get("createdAt");
    return value!.toString();
  }

  set createdAt(value: string) {
    this.set("createdAt", Value.fromString(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get molochAddress(): string | null {
    let value = this.get("molochAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set molochAddress(value: string | null) {
    if (!value) {
      this.unset("molochAddress");
    } else {
      this.set("molochAddress", Value.fromString(<string>value));
    }
  }

  get moloch(): string | null {
    let value = this.get("moloch");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set moloch(value: string | null) {
    if (!value) {
      this.unset("moloch");
    } else {
      this.set("moloch", Value.fromString(<string>value));
    }
  }

  get memberAddress(): Bytes {
    let value = this.get("memberAddress");
    return value!.toBytes();
  }

  set memberAddress(value: Bytes) {
    this.set("memberAddress", Value.fromBytes(value));
  }

  get content(): string {
    let value = this.get("content");
    return value!.toString();
  }

  set content(value: string) {
    this.set("content", Value.fromString(value));
  }

  get contentType(): string {
    let value = this.get("contentType");
    return value!.toString();
  }

  set contentType(value: string) {
    this.set("contentType", Value.fromString(value));
  }

  get location(): string {
    let value = this.get("location");
    return value!.toString();
  }

  set location(value: string) {
    this.set("location", Value.fromString(value));
  }

  get title(): string | null {
    let value = this.get("title");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set title(value: string | null) {
    if (!value) {
      this.unset("title");
    } else {
      this.set("title", Value.fromString(<string>value));
    }
  }

  get description(): string | null {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (!value) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(<string>value));
    }
  }

  get ratified(): boolean {
    let value = this.get("ratified");
    return value!.toBoolean();
  }

  set ratified(value: boolean) {
    this.set("ratified", Value.fromBoolean(value));
  }

  get rawData(): string {
    let value = this.get("rawData");
    return value!.toString();
  }

  set rawData(value: string) {
    this.set("rawData", Value.fromString(value));
  }
}

export class Record extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("createdAt", Value.fromString(""));
    this.set("createdBy", Value.fromBytes(Bytes.empty()));
    this.set("moloch", Value.fromString(""));
    this.set("tag", Value.fromBytes(Bytes.empty()));
    this.set("table", Value.fromString(""));
    this.set("contentType", Value.fromString(""));
    this.set("content", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Record entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Record entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Record", id.toString(), this);
    }
  }

  static load(id: string): Record | null {
    return changetype<Record | null>(store.get("Record", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): string {
    let value = this.get("createdAt");
    return value!.toString();
  }

  set createdAt(value: string) {
    this.set("createdAt", Value.fromString(value));
  }

  get createdBy(): Bytes {
    let value = this.get("createdBy");
    return value!.toBytes();
  }

  set createdBy(value: Bytes) {
    this.set("createdBy", Value.fromBytes(value));
  }

  get moloch(): string {
    let value = this.get("moloch");
    return value!.toString();
  }

  set moloch(value: string) {
    this.set("moloch", Value.fromString(value));
  }

  get tag(): Bytes {
    let value = this.get("tag");
    return value!.toBytes();
  }

  set tag(value: Bytes) {
    this.set("tag", Value.fromBytes(value));
  }

  get table(): string {
    let value = this.get("table");
    return value!.toString();
  }

  set table(value: string) {
    this.set("table", Value.fromString(value));
  }

  get contentType(): string {
    let value = this.get("contentType");
    return value!.toString();
  }

  set contentType(value: string) {
    this.set("contentType", Value.fromString(value));
  }

  get content(): string {
    let value = this.get("content");
    return value!.toString();
  }

  set content(value: string) {
    this.set("content", Value.fromString(value));
  }
}
